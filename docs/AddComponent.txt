Adding a new FPGA component to softGlueZynq is a two-part process: adding the
component in Vivado and producing a .bin file, and writing support for the
component in EPICS.  For the moment, I'll just describe the EPICS side.

To add a new FPGA component, you need the address offsets (byte addresses
relative to the base address of the Xilinx softGlue component) of the inputs ,
outputs, and registers in the component.  I'll work the example of adding two
up/down counters:

1) Make database and .req files, arrange for database and .bin file to be
   installed in the softGlue/db directory

1.1) Write a file "softGlue_FPGAContent_withNewStuff.substitutions",
	 beginning with softGlue_FPGAContent.substitutions and adding the
	 following lines:

	file "softGlue_Input.db"
	{
	pattern {SIG   ADDR}
	{UpDnCntr-1_CLOCK		100}
	{UpDnCntr-1_UPDOWN		101}
	{UpDnCntr-1_ENABLE		102}
	{UpDnCntr-1_CLEAR		103}
	{UpDnCntr-1_LOAD		104}
	{UpDnCntr-2_CLOCK		105}
	{UpDnCntr-2_UPDOWN		106}
	{UpDnCntr-2_ENABLE		107}
	{UpDnCntr-2_CLEAR		108}
	{UpDnCntr-2_LOAD		109}
	}
	
	
	file "softGlue_Output.db"
	{
	pattern {SIG   ADDR}
	{UpDnCntr-1_OUT			43}
	{UpDnCntr-2_OUT			44}
	}
	
	
	file "softGlue_Register32.db"
	{
	pattern {SIG		ADDR}
	{UpDnCntr-1_PRESET	63}
	{UpDnCntr-2_PRESET	64}
	}
	
	file "softGlue_InRegister32.db"
	{
	pattern {SIG     	ADDR}
	{UpDnCntr-1_COUNTS    27}
	{UpDnCntr-2_COUNTS    28}
	}

1.2) Add the following lines to softGlue/softGlueApp/Db/Makefile:

	DB_INSTALLS += ../SoftGlue_withMyNewStuff.bin
	DB += softGlue_FPGAContent_withNewStuff.db

1.3) Make the file UpDnCntr_settings.req with the following content:
	$(P)$(H)UpDnCntr-$(N)_CLOCK_Signal
	$(P)$(H)UpDnCntr-$(N)_UPDOWN_Signal
	$(P)$(H)UpDnCntr-$(N)_ENABLE_Signal
	$(P)$(H)UpDnCntr-$(N)_CLEAR_Signal
	$(P)$(H)UpDnCntr-$(N)_LOAD_Signal
	$(P)$(H)UpDnCntr-$(N)_OUT_Signal
	$(P)$(H)UpDnCntr-$(N)_PRESET

1.4) Make the file softGlue_FPGAContent_s1ID_Vgate_settings.req with the
     following content:

	# up/dn counters
	file UpDnCntr_settings.req P=$(P),H=$(H),N=1
	file UpDnCntr_settings.req P=$(P),H=$(H),N=2


2) Make MEDM-display files

2.1) Make softGlue_UpDnCntr_bare.adl.  This will serve for a stand-alone display
	 of one UpDnCntr, and for any multi-component display that contains one or
	 more UpDnCntr's.  For inputs, make a composite object that loads the file
	 "softGlue_Input.adl" with the macros "P=$(P),H=$(H),SIG=<SIG name from
	 database file>".  For outputs, use "softGlue_Output.adl" with a similar
	 macro string.  For an input register, use a text entry.  For an output
	 register, use a text monitor.
	 
	 To make a composite object that loads a file, make a rectangle, select the
	 rectangle, and group it.  The MEDM Resource Palette will now contain the
	 entry "Composite File".  Type something like the following into the entry
	 box:
	 softGlue_Input.adl;P=$(P),H=$(H),SIG=UpDnCntr-$(N)_CLEAR

2.2) Make softGlue_UpDnCntr.adl, which includes softGlue_UpDnCntr_bare.adl as a
	 composite, and adds a header showing the component type and number, if
	 there are more than one.
